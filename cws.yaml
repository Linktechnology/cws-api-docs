openapi: 3.0.0
info:
  version: "1.0"
  title: CWS API Documentation
  description: |
    This is the documentation for the CWS REST API.
  contact:
    name: Link Technology
    email: systems@linktechnology.net

servers:
  - url: https://{systemId}.cws.app/api/v1/
    description: Production Server
  - url: https://{systemId}-trial.cws.app/api/v1/
    description: Test Server
tags:
  - name: Auth
    description: Authentication Operations
  - name: User
    description: Currenlty authorized User operations
  - name: Work Orders
    description: Specific Work Order operations
  - name: Work Order Statuses
    description: Work Order Status operations. Statuses are used to track the progress of a work order.
  - name: Work Order Logs
    description: Work Order Log operations. Logs are used to track the progress of a work order.
  - name: Work Order Parts
    description: Work Order Part operations. Parts are used to track the parts used on a work order.
  - name: Work Order Charges
    description: Work Order Charge operations. Charges are used to track the charges on a work order.
  - name: Work Order Groups
    description: Work Order Group operations. Groups are logical groupings of workorders, properties and rules.
  - name: Work Order Group Products
    description: Work Order Group Products operations.
  - name: Work Order Groups Faults
    description: Work Order Group Faults operations.

paths:

  #----------------------------------------------------------------------------------------------------------------------- Auth

  /auth:
    post:
      summary: Create a new Access Token from Username and Password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: user@user.com
                password:
                  type: string
                  example: mysecretpassword
      responses:
        '200':
          $ref: '#/components/responses/ResponseToken'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /auth/refresh:
    post:
      summary: Refresh an existing access token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: BqdmioqjlgaSBTIarf8coYFhZfBeqCn82AulZVEkbPdNIVYaa6ny43P4iriJ4FR7gmtgi8AtXOhGKfRVmfuqijvBLOkQtcXKyq0QyBkwqCdaR55dkzEDTaeFYyvsLtcj
      responses:
        '200':
          $ref: '#/components/responses/ResponseToken'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  #----------------------------------------------------------------------------------------------------------------------- User

  /user/session:
    get:
      summary: Get's information about the currenty authorized user
      tags:
        - User
      security:
        - Bearer: [ ]
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: object
                    properties:
                      userId:
                        type: string
                        description: The user's UID
                        example: E7rApNKbg4
                      username:
                        type: string
                        description: The user's username
                        example: "myUserName"
                      name:
                        type: string
                        description: The user's name
                        example: "My Name"
                      email:
                        type: string
                        description: The user's email
                        example: "email@domain.com"
                      phone:
                        type: string
                        description: The user's phone numberi
                        example: "1234567890"
                      success:
                        type: boolean
                        description: Whether the request was successful
                        example: true
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /user/permissions:
    get:
      summary: Get information about the currenty authorized user's permissions
      tags:
        - User
      security:
        - Bearer: [ ]
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PermissionResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  #----------------------------------------------------------------------------------------------------------------------- Work Orders


  /wos:
    get:
      summary: Get a list of all Work Orders.
      tags:
        - Work Orders

      security:
        - Bearer: [ ]
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 500
          description: The number of workorders to return Default 20 Max 500
        - in: query
          name: start
          schema:
            type: integer
            default: 0
          description: The record to start from, zero indexed, default 0
        - in: query
          name: updatedFrom
          schema:
            type: string
          description: ISO-8601 date - When the lookup should start.
          example: 2022-04-10T14:30:00+02:00
        - in: query
          name: updatedUntil
          schema:
            type: string
          description: ISO-8601 date - When the lookup should end.
          example: 2022-04-10T14:30:00+02:00
        - in: query
          name: createdFrom
          schema:
            type: string
          description: ISO-8601 date - When the lookup should start.
          example: 2022-04-10T14:30:00+02:00
        - in: query
          name: createdUntil
          schema:
            type: string
          description: ISO-8601 date - When the lookup should end.
          example: 2022-04-10T14:30:00+02:00
        - in: query
          name: sort
          description: The sort direction
          schema:
            type: string
            enum: [ asc, desc ]
        - in: query
          name: thirdpartyRef
          schema:
            type: string
          description: A third party reference number to filter by
        - in: query
          name: ref
          schema:
            type: string
          description: A reference number to filter by
        - in: query
          name: onlyMeta
          schema:
            type: boolean
          description: Whether to skip the results and only return the meta information
      responses:
        '200':
          $ref: '#/components/responses/ResponseWoListSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
  /wos/{woId}:
    get:
      summary: Get a Work Order by UID
      tags:
        - Work Orders
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
      responses:
        '200':
          $ref: '#/components/responses/ResponseWoSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    patch:
      summary: Update a Work Order
      tags:
        - Work Orders
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WoPatchSchema'
      responses:
        '201':
          $ref: '#/components/responses/ResponseWoSuccess'
        '202':
          $ref: '#/components/responses/ResponseWoCreateSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /wos/{woId}/statuses:
    get:
      summary: Get a list of valid statuses for a Work Order in it's current state
      tags:
        - Work Order Statuses
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order


      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusResponseSchema'

        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

    put:
      summary: Update the status of a Work Order
      tags:
        - Work Order Statuses
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - statusId
                - statusType
              properties:
                statusId:
                  type: string
                  example: E7rApNKbg4

              statusType:
                type: string
                description: The status Type
                example: "Open"
                enum:
                  - Open
                  - Closed
                  - Cancelled
                  - Invoiced
      responses:
        '200':
          $ref: '#/components/responses/ResponseWoCreateSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /wos/{woId}/logs:
    get:
      summary: Get a list of logs for a Work Order
      tags:
        - Work Order Logs
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LogResponseSchema'

        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    post:
      summary: Add a log to a Work Order
      tags:
        - Work Order Logs
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogSchema'

      responses:
        '200':
          $ref: '#/components/responses/ResponseWoCreateSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /wos/{woId}/logs/{logId}:
    get:
      summary: Get a log from a Work Order
      tags:
        - Work Order Logs
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
        - in: path
          name: logId
          schema:
            type: integer
          required: true
          description: The UID of the Log
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/LogResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    delete:
      summary: Delete a log from a Work Order
      tags:
        - Work Order Logs
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
        - in: path
          name: logId
          schema:
            type: integer
          required: true
          description: The UID of the Log
      responses:
        '200':
          $ref: '#/components/responses/ResponseSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'



  /wos/{woId}/parts:
    get:
      summary: Get a list of parts assigned to a Work Order
      tags:
        - Work Order Parts
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PartItemResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    post:
      summary: Add a part to a Work Order
      tags:
        - Work Order Parts
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartItemSchema'
      responses:
        '200':
          description: A successful Work Order operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/PartItemResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /wos/{woId}/parts/{partId}:

    get:
      summary: Get a part assigned to a Work Order
      tags:
        - Work Order Parts
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
        - in: path
          name: partId
          schema:
            type: integer
          required: true
          description: The UID of the Part
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/PartItemResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

    delete:
      summary: Remove a part from a Work Order
      tags:
        - Work Order Parts
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
        - in: path
          name: partId
          schema:
            type: integer
          required: true
          description: The UID of the Part
      responses:
        '200':
          $ref: '#/components/responses/ResponseSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /wos/{woId}/charges:
    get:
      summary: Get a list of charges assigned to a Work Order
      tags:
        - Work Order Charges
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChargeResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    post:
      summary: Add a charge to a Work Order
      tags:
        - Work Order Charges
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeSchema'
      responses:
        '200':
          description: A successful charge operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/ChargeResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /wos/{woId}/charges/{chargeId}:
    get:
      summary: Get a charge assigned to a Work Order
      tags:
        - Work Order Charges
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
        - in: path
          name: chargeId
          schema:
            type: integer
          required: true
          description: The UID of the Charge
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/ChargeResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    delete:
      summary: Delete a charge from a Work Order
      tags:
        - Work Order Charges
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: woId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order
        - in: path
          name: chargeId
          schema:
            type: integer
          required: true
          description: The UID of the charge
      responses:
        '200':
          $ref: '#/components/responses/ResponseWoCreateSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  #----------------------------------------------------------------------------------------------------------------------- Work Order Group

  /groups/{groupId}/wos:
    get:
      summary: Get a list of all Work Orders.
      tags:
        - Work Order Groups
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 500
          description: The number of workorders to return Default 20 Max 500
        - in: query
          name: updatedFrom
          schema:
            type: string
          description: ISO-8601 date - When the lookup should start.
          example: 2022-04-10T14:30:00+02:00
        - in: query
          name: updatedUntil
          schema:
            type: string
          description: ISO-8601 date - When the lookup should end.
          example: 2022-04-10T14:30:00+02:00
        - in: query
          name: createdFrom
          schema:
            type: string
          description: ISO-8601 date - When the lookup should start.
          example: 2022-04-10T14:30:00+02:00
        - in: query
          name: createdUntil
          schema:
            type: string
          description: ISO-8601 date - When the lookup should end.
          example: 2022-04-10T14:30:00+02:00
      responses:
        '200':
          $ref: '#/components/responses/ResponseWoListSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    post:
      summary: Create a new Work Order in a Work Order Group

      tags:
        - Work Order Groups
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Group
        - in: query
          name: mode
          schema:
            type: string
            enum: [ all, queue, create ]
          description: |
            **all** = If it is possible to create it in real-time a 201 response is returned, otherwise it is queued and a 202 response is returned.
            
            **queue** = The Work Order is queued and a 202 response is returned.
            
            **create** = The Work Order is created in real-time and a 201 response is returned. If it is not possible to create it in real-time a 400 response is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WoPostSchema'
      responses:
        '201':
          $ref: '#/components/responses/ResponseWoSuccess'
        '202':
          $ref: '#/components/responses/ResponseWoCreateSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'


  /groups/{groupId}/statuses:
    get:
      summary: Get a list of all available Statuses for a Work Order Group
      tags:
        - Work Order Groups
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
        - in: query
          name: name
          schema:
            type: string
          description: The name to filter by
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    post:
      summary: Create a new Status for a Work Order Group
      tags:
        - Work Order Groups
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusSchema'
      responses:
        '201':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/StatusResponseSchema'

        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/product-brands:
    get:
      summary: Get a list of all available Brands for a Work Order Group
      tags:
        - Work Order Group Products
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
        - in: query
          name: name
          schema:
            type: string
          description: The name of a brand to filter by
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductBrandResponseSchema'

        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    post:
      summary: Create a new Brand for a Work Order Group
      tags:
        - Work Order Group Products
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - brandName
              properties:
                brandName:
                  type: string
                  description: The name of the Brand
                  example: "My Brand"
                brandCost:
                  type: number
                  format: float
                  description: The cost of the Brand
                  example: 10
      responses:
        '201':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductBrandResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/product-brands/{brandId}:
    put:
      summary: Update a Brand for a Work Order Group
      tags:
        - Work Order Group Products
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
        - in: path
          name: brandId
          schema:
            type: integer
          required: true
          description: The UID of the Brand
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - brandCost
              properties:
                typeCost:
                  type: number
                  format: float
                  description: The cost of the Brand
                  example: 1.85
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductBrandResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/product-types:
    get:
      summary: Get a list of all available Types for a Work Order Group
      tags:
        - Work Order Group Products
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
        - in: query
          name: name
          schema:
            type: string
          description: The name of a type to filter by
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductTypeResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'


    post:
      summary: Create a new Type for a Work Order Group
      tags:
        - Work Order Group Products
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - typeName
              properties:
                typeName:
                  type: string
                  description: The name of the Type
                  example: "My Type"
                typeCost:
                  type: number
                  format: float
                  description: The cost of the Type
                  example: 1.85
      responses:
        '201':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductTypeResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/product-types/{typeId}:
    put:
      summary: Update a Type for a Work Order Group
      tags:
        - Work Order Group Products
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
        - in: path
          name: typeId
          schema:
            type: integer
          required: true
          description: The UID of the Type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - typeCost
              properties:
                typeCost:
                  type: number
                  format: float
                  description: The cost of the Type
                  example: 1.85
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductTypeResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/product-models:
    get:
      summary: Get a list of all available Models for a Work Order Group
      tags:
        - Work Order Group Products
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
        - in: query
          name: name
          schema:
            type: string
          description: The name to filter by
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductModelResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    post:
      summary: Create a new Model
      tags:
        - Work Order Group Products
      security:
        - Bearer: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - modelName
                - typeId
                - brandId
              properties:
                modelName:
                  type: string
                  description: The name of the model
                  example: "My Model"
                typeId:
                  type: string
                  description: The id of the product type
                  example: "E7rApNKbg4"
                brandId:
                  type: string
                  description: The id of the product brand
                  example: "E7rApNKbg4"
      responses:
        '201':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: object
                    properties:
                      modelId:
                        type: string
                        description: The Model UID
                        example: E7rApNKbg4
                      modelName:
                        type: string
                        description: The Model Name
                        example: "My Model"
                      typeId:
                        type: string
                        description: The Type UID
                        example: E7rApNKbg4
                      brandId:
                        type: string
                        description: The Brand UID
                        example: E7rApNKbg4
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/product-models/{modelId}:
    put:
      summary: Update a Product Model for a Work Order Group
      tags:
        - Work Order Group Products
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
        - in: path
          name: modelId
          schema:
            type: integer
          required: true
          description: The UID of the Model
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - modelCost
              properties:
                modelCost:
                  type: number
                  format: float
                  description: The cost of the Model
                  example: 1.85
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/ProductModelResponseSchema'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/fault-area-symptoms:
    get:
      summary: Get a list of all available Fault Symptom for a Work Order Group
      tags:
        - Work Order Groups Faults
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FaulAreaSymptomResponseSchema'

        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    post:
      summary: Create a new Fault Symptom for a Work Order Group
      tags:
        - Work Order Groups Faults
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - faultAreaId
                - faultSymptomName
              properties:
                faultAreaName:
                  type: string
                  description: The name of the Fault Area
                  example: "My Fault Area"
                faultSymptomName:
                  type: string
                  description: The name of the Fault Symptom
                  example: "My Fault Symptom"
      responses:
        '201':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/FaultSymptomResponseSchema'

        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/fault-actions:
    get:
      summary: Get a list of all available Fault Actions for a Work Order Group
      tags:
        - Work Order Groups Faults
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
      responses:
        '200':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FaultActionResponseSchema'

        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
    post:
      summary: Create a new Fault Action for a Work Order Group
      tags:
        - Work Order Groups Faults
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - faultActionName
              properties:
                faultActionName:
                  type: string
                  description: The name of the Fault Action
                  example: "My Fault Action"
      responses:
        '201':
          description: A successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/FaultActionResponseSchema'

        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/alt-wo-1:
    post:
      tags:
        - Other
      summary: Create a new Work Order using alt payload 1
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
        - in: query
          name: mode
          schema:
            type: string
            enum: [ all, queue, create ]
          description: |
            **all** = If it is possible to create it in real-time a 201 response is returned, otherwise it is queued and a 202 response is returned.

            **queue** = The Work Order is queued and a 202 response is returned.

            **create** = The Work Order is created in real-time and a 201 response is returned. If it is not possible to create it in real-time a 400 response is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - RequestData
              properties:
                RequestData:
                  type: object
                  required:
                    - Case
                  properties:
                    Case:
                      type: object
                      required:
                        - ProductDescription
                        - ProductGroup
                        - ProductBrand
                        - ProductSerialNumber
                        - ItmModelNumber
                        - FirstName
                        - LastName
                        - Email
                        - Phone
                        - AltPhone
                        - Address
                        - Suburb
                        - Postcode
                        - DateofPurchase
                        - FaultCode
                      properties:
                        ProductDescription:
                          type: string
                        ProductGroup:
                          type: string
                        ProductBrand:
                          type: string
                        ProductSerialNumber:
                          type: string
                        ItmModelNumber:
                          type: string
                        FirstName:
                          type: string
                        LastName:
                          type: string
                        Email:
                          type: string
                        Phone:
                          type: integer
                        AltPhone:
                          type: integer
                        Address:
                          type: string
                        Suburb:
                          type: string
                        Postcode:
                          type: integer
                        DateofPurchase:
                          type: string
                        FaultCode:
                          type: string
      responses:
        '201':
          $ref: '#/components/responses/ResponseWoSuccess'
        '202':
          $ref: '#/components/responses/ResponseWoCreateSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'

  /groups/{groupId}/alt-wo-2:
    post:
      tags:
        - Other
      summary: Create a new Work Order using alt payload 2
      security:
        - Bearer: [ ]
      parameters:
        - in: path
          name: groupId
          schema:
            type: integer
          required: true
          description: The UID of the Work Order Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - referenceId
                - claimNumber
                - problemDescription
                - customer
                - product
                - authAmount
                - fulfillmentMethod
              properties:
                authAmount:
                  type: number
                  format: float
                  example: 100.00
                fulfillmentMethod:
                  type: string
                  example: "Assessment"
                referenceId:
                  type: string
                  format: uuid
                  example: 78cb00c2-f563-487a-a060-ee52dbe329f4
                claimNumber:
                  type: string
                  example: 2331566
                problemDescription:
                  type: string
                  example: Ice maker is no longer making ice and has frozen over.
                customer:
                  type: object
                  required: true
                  properties:
                    name:
                      type: object
                      required:
                        - firstName
                        - lastName
                      properties:
                        firstName:
                          type: string
                          example: John
                        lastName:
                          type: string
                          example: Smith
                    address:
                      type: object
                      required:
                        - line1
                        - postalCode
                      properties:
                        line1:
                          type: string
                          example: 70 Example Street
                        city:
                          type: string
                          example: Coolamon
                        region:
                          type: string
                          example: NSW
                        postalCode:
                          type: string
                          example: 2071
                    contacts:
                      type: array
                      items:
                        type: object
                        required:
                          - value
                        properties:
                          contactType:
                            type: string
                            example: Email
                          value:
                            type: string
                            example: fake@email.com
                product:
                  type: object
                  required:
                    - make
                    - model
                    - serialNumber
                    - purchaseDate
                    - retailer
                  properties:
                    make:
                      type: string
                      example: SAMSUNG
                    model:
                      type: string
                      example: SRF644CDLS
                    description:
                      type: string
                      example: 647l L/STEEL FRENCH DOOR
                    serialNumber:
                      type: string
                      example: K4545565
                    purchaseDate:
                      type: string
                      example: 01/01/2023
                    retailer:
                      type: string
                      example: Harvey Norman
                notes:
                  type: string
                  example: Need this refrigerator assessed for qualified coverage.

      responses:
        '201':
          $ref: '#/components/responses/ResponseWoSuccess'
        '202':
          $ref: '#/components/responses/ResponseWoCreateSuccess'
        '400':
          $ref: '#/components/responses/ResponseErrorBadRequest'
        '405':
          $ref: '#/components/responses/ResponseMethodNotAllowed'
        '401':
          $ref: '#/components/responses/ResponseErrorUnauthorized'
#----------------------------------------------------------------------------------------------------------------------- Components
components:

  securitySchemes:
    bearerAuth:
      description: " 
        Bearer token to be obtained from the /auth or /auth/refresh endpoints.
        Should be sent in all subsequent requests in the Authorization header.
        Provide the token with the format `Bearer: token`"
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:

    ResponseToken:
      description: New Token Response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Whether the request was successful
                example: true
              data:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  accessToken:
                    type: string
                    description: Your new token
                    example: BqdmioqjlgaSBTIarf8coYFhZfBeqCn82AulZVEkbPdNIVYaa6ny43P4iriJ4FR7gmtgi8AtXOhGKfRVmfuqijvBLOkQtcXKyq0QyBkwqCdaR55dkzEDTaeFYyvsLtcj
                  accessExpiresAt:
                    type: string
                    description: ISO-8601 date - When the token will expire
                    example: 2022-04-10T14:30:00+02:00
                  refreshToken:
                    type: string
                    description: Your new token
                    example: BqdmioqjlgaSBTIarf8coYFhZfBeqCn82AulZVEkbPdNIVYaa6ny43P4iriJ4FR7gmtgi8AtXOhGKfRVmfuqijvBLOkQtcXKyq0QyBkwqCdaR55dkzEDTaeFYyvsLtcj
                  refreshExpiresAt:
                    type: string
                    description: ISO-8601 date -  When the token will expire
                    example: 2022-04-10T14:30:00+02:00

    ResponseSuccess:
      description: A successful operation
      content:
        application/json:
          schema:
            type: object
            description: A success response Object
            properties:
              success:
                type: boolean
                description: Whether the request was successful
                example: true

    ResponseWoCreateSuccess:
      description: |
        Work Order accepted for creation success. 
        
        The information supplied is valid but a Work Order can't be created automatically in real-time because the product information supplied cannot be automaticaly matched to the information in the system.
        
        The workorder has been put into a queue for manual intervention.
      content:
        application/json:
          schema:
            type: object
            description: A success response Object
            properties:
              success:
                type: boolean
                description: Whether the request was successful
                example: true

    ResponseWoSuccess:
      description: A successful Work Order operation
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Whether the request was successful
                example: true
              data:
                $ref: '#/components/schemas/WoResponseSchema'

    ResponseWoListSuccess:
      description: Wos list response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                description: Whether the request was successful
                example: true
              data:
                type: object
                properties:
                  totalCount:
                    type: integer
                    description: The total number of results, ignoring the limit
                    example: 100
                  totalPages:
                    type: integer
                    description: The total number of pages
                    example: 5
                  pageSize:
                    type: integer
                    description: The number of results per page
                    example: 20
                  currentPage:
                    type: integer
                    description: The current page
                    example: 1
                  resutlsCount:
                    type: integer
                    description: The current page
                    example: 1
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/WoResponseSchema'

    ResponseErrorBadRequest:
      description: The request is malformed and needs to be fixed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSchema'

    ResponseErrorUnauthorized:
      description: The request is not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSchema'

    ResponseMethodNotAllowed:
      description: The request is to a non existant endpoint or is using the wrong method
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorSchema'

  schemas:
    AddressSchema:
      type: object
      properties:
        name:
          type: string
          example: "Warehouse 1"
        street1:
          type: string
          example: '2 My Fake Street'
        street2:
          type: string
          example: 'Street 2'
        suburb:
          type: string
          example: 'fake Suburb'
        city:
          type: string
          example: 'Syndey'
        state:
          type: string
          example: 'NZW'
        postcode:
          type: number
          example: '12345'

    AddressResponseSchema:
      allOf:
        - $ref: '#/components/schemas/AddressSchema'
        - type: object
          properties:
            country:
              type: string
              example: 'Australia'
            latitude:
              type: number
              example: '-27.4529'
            longitude:
              type: number
              example: '153.031'

    ChargeSchema:
      type: object
      properties:
        chargeDescription:
          type: string
          description: The description of the charge charge
          example: "My Description"
        chargeQuantity:
          type: integer
          description: The quantity of the charge
          example: 1
        chargeUnitPrice:
          type: number
          description: The unit price of the charge
          example: 1.00

        chargeType:
          type: string
          example: Repair
          default: Other
          enum:
            - Repair
            - Service
            - Install
            - Delivery
            - Pickup
            - System Mileage
            - Telephone
            - Email
            - Todo
            - Other
            - Bonus
            - Manual Mileage

    ChargeResponseSchema:
      allOf:
        - $ref: '#/components/schemas/ChargeSchema'
        - type: object
          required:
            - chargeDescription
            - chargeCode
          properties:
            chargeTotalPrice:
              type: number
              description: The chargeQuantity * chargeUnitPrice
              example: 1.00
            chargeId:
              type: string
              description: The UID of the charge charge
              example: E7rApNKbg4

    ContactSchema:
      type: object
      properties:
        name:
          type: string
          example: 'John Smith'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Smith'
        companyName:
          type: string
          example: 'ABC Company ltd'
        address:
          $ref: '#/components/schemas/AddressSchema'
        phone:
          type: string
          example: '89349393'
        email:
          type: string
          example: 'email1@email.com'

    ContactResponseSchema:
      allOf:
        - $ref: '#/components/schemas/ContactSchema'
        - type: object
          required:
            - name
          properties:
            address:
              $ref: '#/components/schemas/AddressResponseSchema'
            contactId:
              type: string
              description: The UID of the contact
              example: E7rApNKbg4

    ErrorSchema:
      type: object
      description: An error response Object
      properties:
        success:
          type: boolean
          description: Whether the request was successful
          example: false
        error:
          type: string
          description: The error message
          example: Error description message text
        errors:
          nullable: true
          type: array
          items:
            type: string
            description: The specific error messages

    FaultAreaSchema:
      type: object
      properties:
        FaultAreaName:
          type: string
          description: The Fault Area Name
          example: "My Fault Area"

    FaultAreaResponseSchema:
      allOf:
        - $ref: '#/components/schemas/FaultAreaSchema'
        - type: object
          properties:
            FaultAreaName:
              type: string
              description: The Fault Area Name
              example: "My Fault Area"
            FaultAreaId:
              type: string
              description: The Fault Area UID
              example: E7rApNKbg4

    FaultSymptomSchema:
      type: object
      properties:
        FaultSymptomName:
          type: string
          description: The Fault Symptom Name
          example: "My Fault Symptom"

    FaultSymptomResponseSchema:
      allOf:
        - $ref: '#/components/schemas/FaultSymptomSchema'
        - type: object
          properties:
            faultSymptomId:
              type: string
              description: The Fault Symptom UID
              example: E7rApNKbg4

    FaultActionSchema:
      type: object
      properties:
        FaultActionName:
          type: string
          description: The Fault Action Name
          example: "My Fault Action"

    FaultActionResponseSchema:
      allOf:
        - $ref: '#/components/schemas/FaultActionSchema'
        - type: object
          properties:
            faultActionId:
              type: string
              description: The Fault Action UID
              example: E7rApNKbg4

    FaulAreaSymptomResponseSchema:
      allOf:
        - $ref: '#/components/schemas/FaultAreaResponseSchema'
        - $ref: '#/components/schemas/FaultSymptomResponseSchema'

    WoProductFaultSchema:
      allOf:
        - $ref: '#/components/schemas/FaultAreaResponseSchema'
        - $ref: '#/components/schemas/FaultSymptomResponseSchema'
        - $ref: '#/components/schemas/FaultActionResponseSchema'
        - type: object
          properties:
            faultDescription:
              type: string
              example: 'My Fault Description'

    LogSchema:
      type: object
      required:
        - logContent
      properties:
        logContent:
          type: string
          description: The log content
          example: "My Log"

    LogResponseSchema:
      allOf:
        - $ref: '#/components/schemas/LogSchema'
        - type: object
          properties:
            logId:
              type: integer
              description: The Log UID
              example: E7rApNKbg4
            logCreated:
              type: string
              description: The date the log was created
              example: "2021-04-10T14:30:00+02:00"
            logCreatedBy:
              type: string
              description: The user who created the log
              example: "John Doe"

    PartItemSchema:
      type: object
      required:
        - partCode
        - partDescription
        - partQuantity
        - partType
      properties:
        partCode:
          type: string
          description: The code of the part
          example: "code-ABC123"
        partDescription:
          type: string
          description: The description of the part
          example: "My Description"
        partQuantity:
          type: integer
          description: The quantity of the item
          example: 1
        partRrp:
          type: number
          format: float
          description: The RRP of the item
          example: 10.99
        partCost:
          type: number
          format: float
          description: The cost of the item
          example: 5.99
        partType:
          type: string
          enum: [ inventory, part ]

    PartItemResponseSchema:
      allOf:
        - $ref: '#/components/schemas/PartItemSchema'
        - type: object
          properties:
            partId:
              type: string
              description: The UID of the part
              example: E7rApNKbg4

    PermissionResponseSchema:
      type: object
      properties:
        permissionId:
          type: integer
          description: The Permission UID
          example: E7rApNKbg4
        permissionName:
          type: string
          description: The Permission Name
          example: "My Permission"
        permissionLevel:
          type: string
          description: The Permission
          example: "admin"

    ProductTypeResponseSchema:
      type: object
      properties:
        typeId:
          type: string
          description: The Type UID
          example: E7rApNKbg4
        typeName:
          type: string
          description: The Type Name
          example: "My Type"
        typeCost:
          type: number
          description: The Type Cost
          example: 5.99

    ProductBrandResponseSchema:
      type: object
      properties:
        brandId:
          type: string
          description: The Brand UID
          example: E7rApNKbg4
        brandName:
          type: string
          description: The Brand Name
          example: "My Brand"
        brandCost:
          type: number
          description: The Brand Cost
          example: 5.99

    ProductModelResponseSchema:
      type: object
      properties:
        typeId:
          type: integer
          description: The Type UID
          example: E7rApNKbg4
        typeName:
          type: string
          description: The Type Name
          example: "My Type"
        typeCost:
          type: number
          description: The Type Cost
          example: 100
        brandId:
          type: integer
          description: The Brand UID
          example: E7rApNKbg4
        brandName:
          type: string
          description: The Brand Name
          example: "My Brand"
        brandCost:
          type: number
          description: The Brand Cost
          example: 100
        modelId:
          type: integer
          description: The Model UID
          example: E7rApNKbg4
        modelName:
          type: string
          description: The Model Name
          example: "My Model"
        modelCost:
          type: number
          description: The Model Cost
          example: 100

    ProductSchema:
      type: object
      description: |
        A product, either a valid product model id must be supplied by querying GET:/groups/{groupId}/productModels 
        or the system will try to automaticlly match up the model from the productModelName
        
        #### either productModelId or productModelName must be supplied
      properties:
        productModelId:
          type: string
          description: The Model UID
          example: E7rApNKbg4
        productModelName:
          type: string
          example: 'MODEL123'
        productDescription:
          type: string
          example: 'My Product Description'
        productSerial:
          type: string
          example: 'abc123'
        productPurchasedAt:
          format: date
          description: full-date notation as defined by RFC 3339, section 5.6, for example, 2017-07-21
          example: 2022-04-10
        fault:
          $ref: '#/components/schemas/WoProductFaultSchema'

    ProductPatchSchema:
      type: object
      description: |
        A product, either a valid product model id must be supplied by querying GET:/groups/{groupId}/productModels 
        or the system will try to automaticlly match up the model from the productModelName

        #### either productModelId or productModelName must be supplied
      properties:
        productDescription:
          type: string
          example: 'My Product Description'
        productSerial:
          type: string
          example: 'abc123'
        productPurchasedAt:
          type: string
          format: date
          description: full-date notation as defined by RFC 3339, section 5.6, for example, 2017-07-21
          example: 2022-04-10
        fault:
          $ref: '#/components/schemas/WoProductFaultSchema'

    ProductResponseSchema:
      type: object
      properties:
        productId:
          type: string
          example: 'E7rApNKbg4'
        modelId:
          type: string
          example: 'E7rApNKbg4'
        modelName:
          type: string
          example: 'My Model'
        typeId:
          type: string
          example: 'E7rApNKbg4'
        typeName:
          type: string
          example: 'My Type'
        brandId:
          type: string
          example: 'E7rApNKbg4'
        brandName:
          type: string
          example: 'My Brand'
        fault:
          $ref: '#/components/schemas/WoProductFaultSchema'

    StatusSchema:
      type: object
      properties:
        statusName:
          type: string
          example: 'My Status'
        statusType:
          type: string
          description: The status Type
          example: "Open"
          enum:
            - Open
            - Closed
            - Cancelled
            - Invoiced

    StatusResponseSchema:
      allOf:
        - $ref: '#/components/schemas/StatusSchema'
        - type: object
          properties:
            statusId:
              type: string
              example: 'E7rApNKbg4'

    WoSchema:
      type: object
      properties:
        ref:
          type: string
          example: 'myref'
        delayRef:
          type: string
          example: 'mydelayref'
        raRef:
          type: string
          example: 'myraref'
        raReason:
          type: string
          example: 'myrareason'
        descrip:
          type: string
          example: 'mydescrip'
        instruct:
          type: string
          example: 'myinstruct'

    WoPostSchema:
      allOf:
        - $ref: '#/components/schemas/WoSchema'
        - type: object
          required:
            - thirdpartyRef
            - product
          properties:
            thirdpartyRef:
              type: string
              example: 'mythirdpartyref'
            product:
              $ref: '#/components/schemas/ProductSchema'
            contacts:
              type: object
              required:
                - customer
              properties:
                customer:
                  $ref: '#/components/schemas/ContactSchema'

    WoPatchSchema:
      type: object
      properties:
        ref:
          type: string
          example: 'myref'
        delayRef:
          type: string
          example: 'mydelayref'
        raRef:
          type: string
          example: 'myraref'
        raReason:
          type: string
          example: 'myrareason'
        descrip:
          type: string
          example: 'mydescrip'
        instruct:
          type: string
          example: 'myinstruct'
        product:
          allOf:
            - $ref: '#/components/schemas/ProductPatchSchema'
            - type: object
              properties:
                fault:
                  $ref: '#/components/schemas/WoProductFaultSchema'

    WoResponseSchema:
      allOf:
        - $ref: '#/components/schemas/WoSchema'
        - type: object
          properties:
            id:
              type: integer
              description: Non-unique, sequential UID on a per-tenant basis
              example: '12345'
            uid:
              type: string
              example: 'E7rApNKbg4'
            thirdpartyRef:
              type: string
              example: 'mythirdpartyref'
            priority:
              type: string
              example: 'High'
            status:
              $ref: '#/components/schemas/StatusResponseSchema'
            contacts:
              type: object
              properties:
                customer:
                  $ref: '#/components/schemas/ContactResponseSchema'
                delivery:
                  nullable: true
                  $ref: '#/components/schemas/ContactResponseSchema'
                location:
                  $ref: '#/components/schemas/ContactResponseSchema'
            product:
              $ref: '#/components/schemas/ProductResponseSchema'








